---
title: "Lab 6"
author: "Trevor Hoang (A16371830)"
format: pdf
---

Today we will get more exposure to functions in R. We call functions to do all our work and today we will learn how to write our own.

## First Function

Note that arguments 2 and 3 have default values (because we set y=0 and z=0) so we don't have t osupply them when we call out function.

```{r}
add = function(x,y=0, z=0) {
  x + y + z
}
```

Using the function

```{r}
add(1,1)
add(1,c(1,100))
```

```{r}
add(100,)
```

```{r}
add(100,10,1)
```

## Second Function

Let's write a function that generates random nucleotide sequences.

We can make use of the in-built `sample()` function in R to help us here.

```{r}
sample(x=1:10, size=11, replace=TRUE)
```
> Q. Can you use `sample()` to generate a random nucleotide sequence of length 5

```{r}
sample(x=c("A","T","C","G"), size=5, replace=T)
```

> Q. Write a function `generate_dna()` that makes a nucleotide sequence of a user specified length.

Every function in R has at least 3 things:

- A **name** (in our case "generate_dna")
- One or more **input arguments** (the "length" of sequence we want)
- A **body** (that does the work)

```{r}
generate_dna = function(x)
{sample(x=c("A","T","C","G"), size=x, replace=T)}
```

```{r}
generate_dna(10)
generate_dna(100)
```


> Q. Can you write a `generate_protein()` function that returns ammino acid squence of a user requested length?

```{r}

aa =bio3d::aa.table$aa1[1:20]
generate_protein = function(x) {
  sample(x=aa, size=x, replace=T)
}  

generate_protein(5)
```

I want my output of this function not to be a vector with one amino acid per element but rather a one single single string.

```{r}
bases = c("A","T","C","G")
paste(bases, collapse = "")
```

```{r}
aa =bio3d::aa.table$aa1[1:20]
generate_protein = function(x) {
  s=sample(x=aa, size=x, replace=T)
  paste(s, collapse="")
}  

generate_protein(5)
```

> Q. generate protein sequences from length 6 to 12?

```{r}
generate_protein(6)
generate_protein(7)
generate_protein(8)
```

We can use the useful utility function `sapply()` to help us "apply" our function over all the values 6 to 12

```{r}
ans = sapply(6:12,generate_protein)
ans
```

```{r}
cat(paste(">ID", 6:12, sep="", "\n", ans, "\n"), sep="")
```

> Q Are any of these sequences unique in nature - i.e. enver found in nature. We can search "refseq-protein" and look for 100% Ide and 100% coverage matches with BLASTp.


About half of the proteins had matches with 100% Ide and 100% coverage.  Id9, Id10, Id11 and Id12 did not have matches.




